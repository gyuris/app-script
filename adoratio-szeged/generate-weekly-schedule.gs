/**
 * Adoratio-Szeged
 * Google napt√°rb√≥l nyomtathat√≥ checklista gener√°l√°sa √©s * email k√ºld√©se a list√°ra a heti beoszt√°sr√≥l √©s a telefonsz√°mokr√≥l
 * √ñn√°ll√≥ szkript heti egyszeri id≈ëponton t√∂rt√©n≈ë id≈ëz√≠t√©ssel
 * Gyuris Gell√©rt
 */

// Id≈ëz√≠t√©s a "Triggerek" men√ºpontban

// Glob√°lis be√°ll√≠t√°sok:
const DESTINATION_FOLDER_ID = '16eM0bclWDkKqwutW6KBfB5EPqz6if9Uc'; // "Heti beoszt√°sok" mappa
const TEMPLATE_FILE_ID = '1BMJDG-KenFPPEC5WnNzFAWjFIQKO-lF2LTjp5MRu-mQ'; // "Heti beoszt√°s, ellen≈ërz≈ëlista SABLON" z√°rolt dokumentum
const CALENDAR_SILENT  = 'adoratio.szeged@gmail.com' // alap√©rtelmezett
const CALENDAR_WORSHIP = '359919ac3b0ae60f349cd7fa3eb4d54527c08259f6f80eb03b9ea3732e3ae684@group.calendar.google.com';
const CALENDAR_LAUD    = 'd71ab7261481207181b04219a2aa964f68234b19aef0daed659b0ee34aa915bf@group.calendar.google.com';
const CALENDAR_BIBLE   = '518f8b15885e20f9801f3e8968a810328f76fba6eb1d7ccb0e2b8dbc69b217f2@group.calendar.google.com';
const RECIPIENT_LIST   = "adoratio-szeged@googlegroups.com"
const RECIPIENT_TEAM   = "miriamaradi@t-online.hu, jobel@ujevangelizacio.hu, csaladkozpont@gmail.com"
const TZ = "Europe/Budapest"

// main
function sendEmail() {
  var events = getCalendarText();
  GmailApp.sendEmail(
    RECIPIENT_LIST,
    "K√∂vetkez≈ë h√©t beoszt√°sa: " + Utilities.formatDate(events.start, TZ, "w") + ". h√©t\n",
    "Kedves Ador√°l√≥ testv√©rek!\n\nA k√∂vetkez≈ë h√©t beoszt√°s√°t al√°bb tal√°lj√°tok. √Åldott egy√ºttl√©tet k√≠v√°nunk nektek az √ör el≈ëtt! Ha helyettes√≠t√©s sz√ºks√©ges, k√©rj√ºk, keress√©tek a koordin√°tort: Aradi Marit +36204260219\n\nSzeretettel: a vezet≈ëi csapat\n\n" + events.html,
    {
      name: 'Adoratio Szeged'
    }
  );
  var file = createChecklistDocument();
  GmailApp.sendEmail(
    RECIPIENT_TEAM,
    "Nyomtasd ki √©s vidd el a Jezsikhez: " + Utilities.formatDate(events.start, TZ, "w") + ". h√©t\n",
    "Hell√≥ Marika, Gell√©rt, Adorj√°n!\n√çme a heti ellen≈ërz≈ë lista a szents√©gim√°d√°shoz. Ezt a mell√©kletet kell kinyomtatni...\n\nF√°radhatatlanul: a g√©p\n",
    {
      name: 'Adoratio Szeged',
      attachments: [file.getAs(MimeType.PDF)]
    }
  );
}

function createChecklistDocument(sDate) {
  var events = getEvents();
  var templateFile = DriveApp.getFileById(TEMPLATE_FILE_ID);
  var destinationFolder = DriveApp.getFolderById(DESTINATION_FOLDER_ID);
  var fileName =  Utilities.formatDate(events.start, TZ, "yyyy-MM-dd") + " Heti beoszt√°s, ellen≈ërz≈ëlista";
  var newFile = templateFile.makeCopy(fileName, destinationFolder);
  var fileToEdit = DocumentApp.openById(newFile.getId());
  var doc = fileToEdit.getBody();

  // h√©t be√°ll√≠t√°sa
  doc.replaceText("xx", Utilities.formatDate(events.start, TZ, "w"));
  // esem√©nyek v√©gigl√©pdel√©se
  if (events.data.length > 0) {
    var day = Utilities.formatDate(new Date(), TZ, "d");
    for (i = 0; i < events.data.length; i++) {
      var event = events.data[i];
      // nap nev√©nek kiirat√°sa ha m√°s, mint az el≈ëz≈ë
      if (Utilities.formatDate(event.getStartTime(), TZ, "d") != day) {
        var year = Utilities.formatDate(event.getStartTime(), TZ, "yyyy");
        var dateMonth = getHUNMonth(event.getStartTime().getMonth());
        var dateDayName = getHUNday(event.getStartTime().getDay());
        var dateDay = Utilities.formatDate(event.getStartTime(), TZ, "d");
        doc.appendParagraph(year + ". " + dateMonth + " " + dateDay + "., " + dateDayName).setHeading(DocumentApp.ParagraphHeading.HEADING1);
      }
      // az esem√©ny adatainak a kiirat√°sa
      var start = Utilities.formatDate(event.getStartTime(), TZ, "HH:mm");
      var end = Utilities.formatDate(event.getEndTime(), TZ, "HH:mm");
      var title = event.getTitle();
      doc.appendParagraph("üî≤  "+ start + "‚Äì" + end + " " + title).setIndentStart(12);
      // k√∂vetkez≈ë nap vizsg√°lat√°hoz
      day = Utilities.formatDate(event.getStartTime(), TZ, "d");
    }
  } else {
    Logger.log('Nincsenek k√∂vetkez≈ë esem√©nyek.');
  }
  fileToEdit.saveAndClose();
  return fileToEdit;
}

function getCalendarText(){
  var events = getEvents();
  // hanyadik h√©t
  var html = Utilities.formatDate(events.start, TZ, "w") + ". h√©t\n";
  // esem√©nyek lek√©rdez√©se a napt√°rb√≥l a d√°tumok alapj√°n
  if (events.data.length > 0) {
    var day = Utilities.formatDate(new Date(), TZ, "d");
    // v√©gigl√©pdel√©s
    for (i = 0; i < events.data.length; i++) {
      var event = events.data[i];
      // nap nev√©nek kiirat√°sa ha m√°s, mint az el≈ëz≈ë
      if (Utilities.formatDate(event.getStartTime(), TZ, "d") != day) {
        var year = Utilities.formatDate(event.getStartTime(), TZ, "yyyy");
        var dateMonth = getHUNMonth(event.getStartTime().getMonth());
        var dateDayName = getHUNday(event.getStartTime().getDay());
        var dateDay = Utilities.formatDate(event.getStartTime(), TZ, "d");
        html += "\n" + year + ". " + dateMonth + " " + dateDay + "., " + dateDayName + "\n";
      }
      // az esem√©ny adatainak a kiirat√°sa
      var start = Utilities.formatDate(event.getStartTime(), TZ, "HH:mm");
      var end = Utilities.formatDate(event.getEndTime(), TZ, "HH:mm");
      var title = event.getTitle();
      var description = event.getDescription().replace(/<\/?[^>]+(>|$)/g, "");
      html += start + "‚Äì" + end + " " + title + " (" + description +")\n";
           // k√∂vetkez≈ë nap vizsg√°lat√°hoz
      day = Utilities.formatDate(event.getStartTime(), TZ, "d");
    }
  } else {
    Logger.log('Nincsenek k√∂vetkez≈ë esem√©nyek.');
  }
  //Logger.log(html)
  return { html: html, start: events.start };
}

// esem√©nyek lek√©rdez√©se a napt√°rakb√≥l
function getEvents(){
  const calendar = CalendarApp.getDefaultCalendar();
  const calendarWorship = CalendarApp.getCalendarById(CALENDAR_WORSHIP);
  const calendarLaud = CalendarApp.getCalendarById(CALENDAR_LAUD);
  const calendarBible = CalendarApp.getCalendarById(CALENDAR_BIBLE);

  // k√∂vetkez≈ë h√©t h√©tf≈ëje √©s r√° egy h√©t
  var monday = getNextMonday(new Date());
  var week = getNextMonday(new Date());
  week.setDate(week.getDate() + (((1 + 7 - week.getDay()) % 7) || 7));

  // t√∂bb napt√°r √∂sszef≈±z√©se
  var arrayEvents = calendar.getEvents(monday, week);
  arrayEvents = arrayEvents.concat(calendarWorship.getEvents(monday, week));
  arrayEvents = arrayEvents.concat(calendarLaud.getEvents(monday, week));
  arrayEvents = arrayEvents.concat(calendarBible.getEvents(monday, week));
  arrayEvents.sort((a, b) => {return a.getStartTime().valueOf() - b.getStartTime().valueOf()});

  return { start: monday, end: week, data: arrayEvents };
}

// a mai d√°tumhoz legk√∂zelebbi h√©tf≈ë 00:00 meghat√°roz√°sa
function getNextMonday(date = new Date()) {
  const dateCopy = new Date(date.getTime());
  const nextMonday = new Date(
    dateCopy.setDate(
      dateCopy.getDate() + ((7 - dateCopy.getDay() + 1) % 7 || 7),
    ),
  );
  nextMonday.setHours(0, 0, 0);
  return nextMonday;
}

function getHUNMonth(n) {
  const months = new Array("janu√°r", "febru√°r", "m√°rcius", "√°prilis", "m√°jus", "j√∫nius", "j√∫lius", "augusztus", "szeptember", "okt√≥ber", "november", "december");
  return months[n];
}

function getHUNday(n) {
  const days = new Array("vas√°rnap", "h√©tf≈ë", "kedd", "szerda", "cs√ºt√∂rt√∂k", "p√©ntek", "szombat", "vas√°rnap")
  return days[n];
}
